#line 44 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#line 44 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

// Upgrade NOTE: excluded shader from DX11 and Xbox360; has structs without semantics (struct v2f members noise1,noise2)
// #pragma exclude_renderers d3d11 xbox360
             // #pragma vertex vert alpha
             // #pragma fragment frag
             #include "UnityCG.cginc"
             
             struct appdata_t
             {
                 float4 vertex   : POSITION;
                 float4 color    : COLOR;
                 float2 texcoord : TEXCOORD0;
             };
 
             struct v2f
             {
                 float4 vertex   : SV_POSITION;
                 fixed4 color    : COLOR;
                 half2 texcoord  : TEXCOORD0;
				 float2 noise	 : SV_POSITION;
             };
             
             fixed4 _Color;
			 float _Noise1;
			 float _Noise2;
 
             v2f vert(appdata_t IN)
             {
                 v2f OUT;
                 OUT.vertex = mul(UNITY_MATRIX_MVP, IN.vertex);
                 OUT.texcoord = IN.texcoord;

 #ifdef UNITY_HALF_TEXEL_OFFSET
                 OUT.vertex.xy += (_ScreenParams.zw-1.0)*float2(-1,1);
 #endif
                 OUT.color = IN.color * _Color;
				 OUT.noise.y = _Noise2;
                 return OUT;
             }
 
             sampler2D _MainTex;
 
             fixed4 frag(v2f IN) : SV_Target
             {
				half4 color = IN.color;
				
				half2 xy = IN.texcoord.xy;

				half co = length(xy - (0.5));

								// inga hopp h√§r inte 
				co = (co * co) * step(co, 0.5);
				
				color.a = (1 - co - 0.8) * 2 * step(0.0000001, co);

				color.a *= abs(fmod(IN.noise.y, 2) - 1) * 2;

				return color;
             }
         